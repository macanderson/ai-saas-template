# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseModel, Field

from . import types, enums, errors, fields, bases
from ._types import FuncType
from ._compat import model_rebuild, field_validator
from ._builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

class Tenant(bases.BaseTenant):
    """Represents a Tenant record"""

    id: _str
    name: _str
    users: Optional[List['models.User']] = None
    candidates: Optional[List['models.Candidate']] = None
    companies: Optional[List['models.Company']] = None
    searches: Optional[List['models.Search']] = None
    jobs: Optional[List['models.Job']] = None
    createdById: Optional[_str] = None
    updatedById: Optional[_str] = None
    createdBy: Optional['models.User'] = None
    updatedBy: Optional['models.User'] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime] = None
    deleted: _bool

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.TenantKeys']] = None,
        exclude: Optional[Iterable['types.TenantKeys']] = None,
        required: Optional[Iterable['types.TenantKeys']] = None,
        optional: Optional[Iterable['types.TenantKeys']] = None,
        relations: Optional[Mapping['types.TenantRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.TenantKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Tenant_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Tenant_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Tenant_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Tenant_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Tenant_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Tenant_relational_fields:
                        raise errors.UnknownRelationalFieldError('Tenant', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Tenant / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Tenant',
            }
        )
        _created_partial_types.add(name)


class User(bases.BaseUser):
    """Represents a User record"""

    id: _str
    email: _str
    name: Optional[_str] = None
    tenantId: _str
    tenant: Optional['models.Tenant'] = None
    searches: Optional[List['models.Search']] = None
    candidates: Optional[List['models.Candidate']] = None
    jobs: Optional[List['models.Job']] = None
    createdById: Optional[_str] = None
    updatedById: Optional[_str] = None
    createdBy: Optional['models.User'] = None
    updatedBy: Optional['models.User'] = None
    createdTenants: Optional[List['models.Tenant']] = None
    updatedTenants: Optional[List['models.Tenant']] = None
    createdUsers: Optional[List['models.User']] = None
    updatedUsers: Optional[List['models.User']] = None
    createdCandidates: Optional[List['models.Candidate']] = None
    updatedCandidates: Optional[List['models.Candidate']] = None
    createdSearches: Optional[List['models.Search']] = None
    updatedSearches: Optional[List['models.Search']] = None
    touchedCandidates: Optional[List['models.Candidate']] = None
    createdJobs: Optional[List['models.Job']] = None
    updatedJobs: Optional[List['models.Job']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime] = None
    deleted: _bool

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UserKeys']] = None,
        exclude: Optional[Iterable['types.UserKeys']] = None,
        required: Optional[Iterable['types.UserKeys']] = None,
        optional: Optional[Iterable['types.UserKeys']] = None,
        relations: Optional[Mapping['types.UserRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.UserKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _User_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _User_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _User_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _User_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _User_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _User_relational_fields:
                        raise errors.UnknownRelationalFieldError('User', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid User / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'User',
            }
        )
        _created_partial_types.add(name)


class Candidate(bases.BaseCandidate):
    """Represents a Candidate record"""

    id: _str
    name: Optional[_str] = None
    email: Optional[_str] = None
    linkedin: Optional[_str] = None
    github: Optional[_str] = None
    website: Optional[_str] = None
    phone: Optional[_str] = None
    location: Optional[_str] = None
    status: Optional['enums.CandidateStatus'] = None
    interest: Optional['enums.CandidateInterest'] = None
    careerLevel: Optional['enums.CandidateCareerLevel'] = None
    resume: Optional[_str] = None
    source: Optional[_str] = None
    profile: Optional['fields.Json'] = None
    notes: Optional[_str] = None
    lastTouched: Optional[datetime.datetime] = None
    tenantId: _str
    userId: _str
    lastTouchedById: Optional[_str] = None
    tenant: Optional['models.Tenant'] = None
    user: Optional['models.User'] = None
    lastTouchedBy: Optional['models.User'] = None
    searches: Optional[List['models.Search']] = None
    companies: Optional[List['models.Company']] = None
    jobs: Optional[List['models.Job']] = None
    createdById: Optional[_str] = None
    updatedById: Optional[_str] = None
    createdBy: Optional['models.User'] = None
    updatedBy: Optional['models.User'] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime] = None
    deleted: _bool

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CandidateKeys']] = None,
        exclude: Optional[Iterable['types.CandidateKeys']] = None,
        required: Optional[Iterable['types.CandidateKeys']] = None,
        optional: Optional[Iterable['types.CandidateKeys']] = None,
        relations: Optional[Mapping['types.CandidateRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CandidateKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Candidate_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Candidate_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Candidate_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Candidate_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Candidate_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Candidate_relational_fields:
                        raise errors.UnknownRelationalFieldError('Candidate', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Candidate / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Candidate',
            }
        )
        _created_partial_types.add(name)


class Search(bases.BaseSearch):
    """Represents a Search record"""

    id: _str
    title: _str
    filters: 'fields.Json'
    userId: _str
    tenantId: _str
    user: Optional['models.User'] = None
    tenant: Optional['models.Tenant'] = None
    candidates: Optional[List['models.Candidate']] = None
    createdById: Optional[_str] = None
    updatedById: Optional[_str] = None
    createdBy: Optional['models.User'] = None
    updatedBy: Optional['models.User'] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime] = None
    deleted: _bool

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.SearchKeys']] = None,
        exclude: Optional[Iterable['types.SearchKeys']] = None,
        required: Optional[Iterable['types.SearchKeys']] = None,
        optional: Optional[Iterable['types.SearchKeys']] = None,
        relations: Optional[Mapping['types.SearchRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.SearchKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Search_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Search_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Search_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Search_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Search_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Search_relational_fields:
                        raise errors.UnknownRelationalFieldError('Search', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Search / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Search',
            }
        )
        _created_partial_types.add(name)


class Job(bases.BaseJob):
    """Represents a Job record"""

    id: _str
    title: _str
    description: Optional[_str] = None
    location: Optional[_str] = None
    salaryMin: Optional[_int] = None
    salaryMax: Optional[_int] = None
    employmentType: Optional[_str] = None
    status: 'enums.JobStatus'
    requirements: Optional[_str] = None
    responsibilities: Optional[_str] = None
    benefits: Optional[_str] = None
    industry: Optional['enums.Industry'] = None
    tenantId: _str
    tenant: Optional['models.Tenant'] = None
    userId: _str
    user: Optional['models.User'] = None
    companyId: _str
    company: Optional['models.Company'] = None
    candidates: Optional[List['models.Candidate']] = None
    createdById: Optional[_str] = None
    updatedById: Optional[_str] = None
    createdBy: Optional['models.User'] = None
    updatedBy: Optional['models.User'] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime] = None
    deleted: _bool

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.JobKeys']] = None,
        exclude: Optional[Iterable['types.JobKeys']] = None,
        required: Optional[Iterable['types.JobKeys']] = None,
        optional: Optional[Iterable['types.JobKeys']] = None,
        relations: Optional[Mapping['types.JobRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.JobKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Job_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Job_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Job_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Job_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Job_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Job_relational_fields:
                        raise errors.UnknownRelationalFieldError('Job', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Job / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Job',
            }
        )
        _created_partial_types.add(name)


class Company(bases.BaseCompany):
    """Represents a Company record"""

    id: _str
    name: _str
    logo: Optional[_str] = None
    url: Optional[_str] = None
    stage: Optional['enums.CompanyStage'] = None
    size: Optional['enums.CompanySize'] = None
    industry: Optional['enums.Industry'] = None
    tenantId: _str
    tenant: Optional['models.Tenant'] = None
    jobs: Optional[List['models.Job']] = None
    candidates: Optional[List['models.Candidate']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime] = None
    deleted: _bool

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CompanyKeys']] = None,
        exclude: Optional[Iterable['types.CompanyKeys']] = None,
        required: Optional[Iterable['types.CompanyKeys']] = None,
        optional: Optional[Iterable['types.CompanyKeys']] = None,
        relations: Optional[Mapping['types.CompanyRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CompanyKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Company_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Company_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Company_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Company_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Company_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Company_relational_fields:
                        raise errors.UnknownRelationalFieldError('Company', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Company / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Company',
            }
        )
        _created_partial_types.add(name)



_Tenant_relational_fields: Set[str] = {
        'users',
        'candidates',
        'companies',
        'searches',
        'jobs',
        'createdBy',
        'updatedBy',
    }
_Tenant_fields: Dict['types.TenantKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('users', {
            'name': 'users',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.User\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('candidates', {
            'name': 'candidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Candidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('companies', {
            'name': 'companies',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Company\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('searches', {
            'name': 'searches',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Search\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('jobs', {
            'name': 'jobs',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Job\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdById', {
            'name': 'createdById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedById', {
            'name': 'updatedById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdBy', {
            'name': 'createdBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedBy', {
            'name': 'updatedBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_User_relational_fields: Set[str] = {
        'tenant',
        'searches',
        'candidates',
        'jobs',
        'createdBy',
        'updatedBy',
        'createdTenants',
        'updatedTenants',
        'createdUsers',
        'updatedUsers',
        'createdCandidates',
        'updatedCandidates',
        'createdSearches',
        'updatedSearches',
        'touchedCandidates',
        'createdJobs',
        'updatedJobs',
    }
_User_fields: Dict['types.UserKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('searches', {
            'name': 'searches',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Search\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('candidates', {
            'name': 'candidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Candidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('jobs', {
            'name': 'jobs',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Job\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdById', {
            'name': 'createdById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedById', {
            'name': 'updatedById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdBy', {
            'name': 'createdBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedBy', {
            'name': 'updatedBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdTenants', {
            'name': 'createdTenants',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Tenant\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedTenants', {
            'name': 'updatedTenants',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Tenant\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdUsers', {
            'name': 'createdUsers',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.User\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedUsers', {
            'name': 'updatedUsers',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.User\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdCandidates', {
            'name': 'createdCandidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Candidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedCandidates', {
            'name': 'updatedCandidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Candidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdSearches', {
            'name': 'createdSearches',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Search\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedSearches', {
            'name': 'updatedSearches',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Search\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('touchedCandidates', {
            'name': 'touchedCandidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Candidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdJobs', {
            'name': 'createdJobs',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Job\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedJobs', {
            'name': 'updatedJobs',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Job\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Candidate_relational_fields: Set[str] = {
        'tenant',
        'user',
        'lastTouchedBy',
        'searches',
        'companies',
        'jobs',
        'createdBy',
        'updatedBy',
    }
_Candidate_fields: Dict['types.CandidateKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('linkedin', {
            'name': 'linkedin',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('github', {
            'name': 'github',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('website', {
            'name': 'website',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('phone', {
            'name': 'phone',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('location', {
            'name': 'location',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('status', {
            'name': 'status',
            'is_list': False,
            'optional': True,
            'type': 'enums.CandidateStatus',
            'is_relational': False,
            'documentation': None,
        }),
        ('interest', {
            'name': 'interest',
            'is_list': False,
            'optional': True,
            'type': 'enums.CandidateInterest',
            'is_relational': False,
            'documentation': None,
        }),
        ('careerLevel', {
            'name': 'careerLevel',
            'is_list': False,
            'optional': True,
            'type': 'enums.CandidateCareerLevel',
            'is_relational': False,
            'documentation': None,
        }),
        ('resume', {
            'name': 'resume',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('source', {
            'name': 'source',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('profile', {
            'name': 'profile',
            'is_list': False,
            'optional': True,
            'type': 'fields.Json',
            'is_relational': False,
            'documentation': None,
        }),
        ('notes', {
            'name': 'notes',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastTouched', {
            'name': 'lastTouched',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastTouchedById', {
            'name': 'lastTouchedById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('lastTouchedBy', {
            'name': 'lastTouchedBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('searches', {
            'name': 'searches',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Search\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('companies', {
            'name': 'companies',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Company\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('jobs', {
            'name': 'jobs',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Job\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdById', {
            'name': 'createdById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedById', {
            'name': 'updatedById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdBy', {
            'name': 'createdBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedBy', {
            'name': 'updatedBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Search_relational_fields: Set[str] = {
        'user',
        'tenant',
        'candidates',
        'createdBy',
        'updatedBy',
    }
_Search_fields: Dict['types.SearchKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('title', {
            'name': 'title',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('filters', {
            'name': 'filters',
            'is_list': False,
            'optional': False,
            'type': 'fields.Json',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('candidates', {
            'name': 'candidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Candidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdById', {
            'name': 'createdById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedById', {
            'name': 'updatedById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdBy', {
            'name': 'createdBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedBy', {
            'name': 'updatedBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Job_relational_fields: Set[str] = {
        'tenant',
        'user',
        'company',
        'candidates',
        'createdBy',
        'updatedBy',
    }
_Job_fields: Dict['types.JobKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('title', {
            'name': 'title',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('location', {
            'name': 'location',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('salaryMin', {
            'name': 'salaryMin',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('salaryMax', {
            'name': 'salaryMax',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('employmentType', {
            'name': 'employmentType',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('status', {
            'name': 'status',
            'is_list': False,
            'optional': False,
            'type': 'enums.JobStatus',
            'is_relational': False,
            'documentation': None,
        }),
        ('requirements', {
            'name': 'requirements',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('responsibilities', {
            'name': 'responsibilities',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('benefits', {
            'name': 'benefits',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('industry', {
            'name': 'industry',
            'is_list': False,
            'optional': True,
            'type': 'enums.Industry',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('companyId', {
            'name': 'companyId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('company', {
            'name': 'company',
            'is_list': False,
            'optional': True,
            'type': 'models.Company',
            'is_relational': True,
            'documentation': None,
        }),
        ('candidates', {
            'name': 'candidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Candidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdById', {
            'name': 'createdById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedById', {
            'name': 'updatedById',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdBy', {
            'name': 'createdBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('updatedBy', {
            'name': 'updatedBy',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Company_relational_fields: Set[str] = {
        'tenant',
        'jobs',
        'candidates',
    }
_Company_fields: Dict['types.CompanyKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('logo', {
            'name': 'logo',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('url', {
            'name': 'url',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('stage', {
            'name': 'stage',
            'is_list': False,
            'optional': True,
            'type': 'enums.CompanyStage',
            'is_relational': False,
            'documentation': None,
        }),
        ('size', {
            'name': 'size',
            'is_list': False,
            'optional': True,
            'type': 'enums.CompanySize',
            'is_relational': False,
            'documentation': None,
        }),
        ('industry', {
            'name': 'industry',
            'is_list': False,
            'optional': True,
            'type': 'enums.Industry',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('jobs', {
            'name': 'jobs',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Job\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('candidates', {
            'name': 'candidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Candidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
model_rebuild(Tenant)
model_rebuild(User)
model_rebuild(Candidate)
model_rebuild(Search)
model_rebuild(Job)
model_rebuild(Company)
