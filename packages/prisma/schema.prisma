generator client {
  provider = "prisma-client-py"
  output   = "../../apps/api/prisma_client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["api"]
}

enum CandidateStatus {
  ACTIVE
  INACTIVE
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
}

enum CandidateCareerLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  DIRECTOR_LEVEL
  C_LEVEL
}

enum CandidateInterest {
  UNKNOWN
  NOT_INTERESTED
  OPEN_TO_WORK
}

enum CompanyStage {
  PRE_SEED
  SEED
  SERIES_A
  SERIES_B
  SERIES_C
  SERIES_D
  PUBLIC
  PRIVATE
}

enum JobStatus {
  OPEN
  CLOSED
  ON_HOLD
  FILLED
}

enum CompanySize {
  SIZE_1_10
  SIZE_10_50
  SIZE_50_100
  SIZE_100_250
  SIZE_250_500
  SIZE_500_1000
  SIZE_1000_5000
  SIZE_5000_PLUS
}

enum Industry {
  TECHNOLOGY
  FINANCE
  HEALTHCARE
  EDUCATION
  MANUFACTURING
  RETAIL
  ENERGY
  TRANSPORTATION
  ENTERTAINMENT
  HOSPITALITY
  GOVERNMENT
  NON_PROFIT
  REAL_ESTATE
  CONSULTING
  TELECOMMUNICATIONS
  AGRICULTURE
  OTHER
}

model Tenant {
  id        String   @id @default(uuid()) @map("id")
  name      String   @map("name")
  users     User[]   @relation("TenantUsers")
  candidates Candidate[]
  companies  Company[]
  searches  Search[]
  jobs      Job[]   @relation("TenantJobs")

  createdById String? @map("created_by_id")
  updatedById String? @map("updated_by_id")
  createdBy   User?    @relation("TenantCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("TenantUpdatedBy", fields: [updatedById], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  deleted     Boolean  @default(false) @map("deleted")

  @@map("tenants")
  @@unique([name, deletedAt], name: "unique_tenant_name")
}

model User {
  id          String   @id @default(uuid()) @map("id")
  email       String   @map("email")
  name        String?  @map("name")
  tenantId    String   @map("tenant_id")
  tenant      Tenant   @relation("TenantUsers", fields: [tenantId], references: [id])
  searches    Search[]
  candidates  Candidate[]
  jobs             Job[]   @relation("UserJobs")

  createdById String? @map("created_by_id")
  updatedById String? @map("updated_by_id")
  createdBy   User?    @relation("UserCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("UserUpdatedBy", fields: [updatedById], references: [id])

  createdTenants    Tenant[] @relation("TenantCreatedBy")
  updatedTenants    Tenant[] @relation("TenantUpdatedBy")
  createdUsers      User[]   @relation("UserCreatedBy")
  updatedUsers      User[]   @relation("UserUpdatedBy")
  createdCandidates Candidate[] @relation("CandidateCreatedBy")
  updatedCandidates Candidate[] @relation("CandidateUpdatedBy")
  createdSearches   Search[]    @relation("SearchCreatedBy")
  updatedSearches   Search[]    @relation("SearchUpdatedBy")
  touchedCandidates Candidate[] @relation("CandidateTouchedBy")
  createdJobs      Job[]   @relation("JobCreatedBy")
  updatedJobs      Job[]   @relation("JobUpdatedBy")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  deleted     Boolean  @default(false) @map("deleted")

  @@map("users")
  @@unique([tenantId, email, deletedAt], name: "unique_user_email_tenant")
}

model Candidate {
  id            String               @id @default(uuid()) @map("id")
  name          String?              @map("name")
  email         String?              @map("email")
  linkedin      String?              @map("linkedin")
  github        String?              @map("github")
  website       String?              @map("website")
  phone         String?              @map("phone")
  location      String?              @map("location")
  status        CandidateStatus?     @map("status")
  interest      CandidateInterest?   @map("interest")
  careerLevel   CandidateCareerLevel? @map("career_level")
  resume        String?              @map("resume")
  source        String?              @map("source")
  profile       Json?                @map("profile")
  notes         String?              @map("notes")
  lastTouched   DateTime?            @map("last_touched")

  tenantId      String   @map("tenant_id")
  userId        String   @map("user_id")
  lastTouchedById String? @map("last_touched_by_id")
  tenant        Tenant               @relation(fields: [tenantId], references: [id])
  user          User                 @relation(fields: [userId], references: [id])
  lastTouchedBy User?                @relation("CandidateTouchedBy", fields: [lastTouchedById], references: [id])
  searches      Search[]             @relation("CandidateSearches")
  companies    Company[] @relation("CompanyCandidates")
  jobs         Job[]     @relation("JobCandidates")

  createdById   String? @map("created_by_id")
  updatedById   String? @map("updated_by_id")
  createdBy     User?                @relation("CandidateCreatedBy", fields: [createdById], references: [id])
  updatedBy     User?                @relation("CandidateUpdatedBy", fields: [updatedById], references: [id])

  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
  deletedAt     DateTime?            @map("deleted_at")
  deleted       Boolean              @default(false) @map("deleted")

  @@map("candidates")
  @@unique([tenantId, email, deletedAt], name: "unique_candidate_email")
}

model Search {
  id            String       @id @default(uuid()) @map("id")
  title         String       @map("title")
  filters       Json         @map("filters")

  userId        String       @map("user_id")
  tenantId      String       @map("tenant_id")
  user          User         @relation(fields: [userId], references: [id])
  tenant        Tenant       @relation(fields: [tenantId], references: [id])
  candidates    Candidate[]  @relation("CandidateSearches")

  createdById   String?      @map("created_by_id")
  updatedById   String?      @map("updated_by_id")
  createdBy     User?        @relation("SearchCreatedBy", fields: [createdById], references: [id])
  updatedBy     User?        @relation("SearchUpdatedBy", fields: [updatedById], references: [id])

  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  deletedAt     DateTime?    @map("deleted_at")
  deleted       Boolean      @default(false) @map("deleted")

  @@map("searches")
}

model Job {
  id            String      @id @default(uuid()) @map("id")
  title         String      @map("title")
  description   String?     @map("description")
  location      String?     @map("location")
  salaryMin     Int?        @map("salary_min")
  salaryMax     Int?        @map("salary_max")
  employmentType String?    @map("employment_type")
  status        JobStatus  @default(OPEN) @map("status")
  requirements  String?     @map("requirements")
  responsibilities String?  @map("responsibilities")
  benefits      String?     @map("benefits")
  industry      Industry?   @map("industry")

  tenantId      String      @map("tenant_id")
  tenant        Tenant     @relation("TenantJobs", fields: [tenantId], references: [id])
  userId        String      @map("user_id")
  user          User       @relation("UserJobs", fields: [userId], references: [id])
  companyId    String      @map("company_id")
  company      Company   @relation(fields: [companyId], references: [id])
  candidates   Candidate[] @relation("JobCandidates")

  createdById   String?     @map("created_by_id")
  updatedById   String?     @map("updated_by_id")
  createdBy     User?      @relation("JobCreatedBy", fields: [createdById], references: [id])
  updatedBy     User?      @relation("JobUpdatedBy", fields: [updatedById], references: [id])

  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  deletedAt     DateTime?  @map("deleted_at")
  deleted       Boolean    @default(false) @map("deleted")

  @@map("jobs")
  @@unique([tenantId, title, deletedAt], name: "unique_job_title_tenant")
}

model Company {
  id          String   @id @default(uuid()) @map("id")
  name        String   @map("name")
  logo        String?  @map("logo")
  url         String?  @map("url")
  stage       CompanyStage? @map("stage")
  size        CompanySize? @map("size")
  industry    Industry? @map("industry")
  tenantId    String   @map("tenant_id")
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  jobs        Job[]
  candidates  Candidate[] @relation("CompanyCandidates")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  deleted     Boolean  @default(false) @map("deleted")
  @@map("companies")
  @@unique([tenantId, name, deletedAt], name: "unique_company_name_tenant")
}
